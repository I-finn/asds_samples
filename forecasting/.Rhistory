calibration_tbl %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = interactive
)
refit_tbl <- calibration_tbl %>%
modeltime_refit(data = train)
refit_tbl %>%
modeltime_forecast(h = "85 weeks", actual_data = country) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive,
.conf_interval_show = FALSE
)
#class(m750_models)
#class(refit_tbl)
#m750_models
ensemble_fit <- refit_tbl %>%
ensemble_average(type = "mean")
ensemble_fit
# Calibration
calibration_tbl <- modeltime_table(
ensemble_fit
) %>%
modeltime_calibrate(testing(splits), quiet = FALSE)
# Forecast vs Test Set
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE)
# Forecast vs Test Set
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = mtitle)
.title = paste0(mtitle,"\n","Ensemble model"),
# Forecast vs Test Set
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n Ensemble model"),
.x_lab = x_lab,
.y_lab = y_lab)
# default graph labels
mtitle <- paste0(country_code," all causes deaths")
# default graph labels
mtitle <- paste0(country_code," all causes deaths")
# Forecast vs Test Set
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n Ensemble model"),
.x_lab = x_lab,
.y_lab = y_lab)
# Forecast vs Test Set
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
# Forecast vs Test Set
fig <- calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
export(p=fig, file=here("docs", "ensemble.png"))
plotly::export(p=fig, file=here("docs", "ensemble.png"))
plotly::export(p=fig, file="docs/ensemble.png")
?orca
orca(p=fig, file="docs/ensemble.png")
save_image(p=fig, file="docs/ensemble.png")
plotly::save_image(p=fig, file="docs/ensemble.png")
require(reticulate)
install.packages("reticulate")
require(reticulate)
# Forecast vs Test Set
fig <- calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
plotly::save_image(p=fig, file="docs/ensemble.png")
# Forecast vs Test Set
png("docs/ensemble.png")
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
dev.off()
calibration_tbl
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = train
)
ensemble_fit
calibration_tbl %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = interactive
)
calibration_tbl %>%
modeltime_accuracy() %>% table()
calibration_tbl %>%
modeltime_accuracy() #%>% table()
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
new_data    = train,
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
new_data    = NULL,#testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
# test set forecast and accuracy
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive,
.conf_interval_show = FALSE
)
# test set forecast and accuracy
calibration_tbl %>%
modeltime_forecast(
new_data    = NULL, #testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive,
.conf_interval_show = FALSE
)
# calibrate
calibration_tbl <- models_tbl %>%
modeltime_calibrate(new_data = train)
# test set forecast and accuracy
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = country,
) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive,
.conf_interval_show = FALSE
)
calibration_tbl %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = interactive
)
refit_tbl <- calibration_tbl %>%
modeltime_refit(data = train)
refit_tbl %>%
modeltime_forecast(h = "85 weeks", actual_data = country) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive,
.conf_interval_show = FALSE
)
#class(m750_models)
#class(refit_tbl)
#m750_models
ensemble_fit <- refit_tbl %>%
ensemble_average(type = "mean")
# Calibration
calibration_tbl <- modeltime_table(
ensemble_fit
) %>%
modeltime_calibrate(testing(splits), quiet = FALSE)
# Calibration
calibration_tbl <- modeltime_table(
ensemble_fit
) %>%
modeltime_calibrate(train, quiet = FALSE)
calibration_tbl %>%
modeltime_forecast(
new_data    = NULL,#testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
new_data    = train,
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
#new_data    = train,
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
# Calibration
calibration_tbl <- modeltime_table(
ensemble_fit
) %>%
modeltime_calibrate(country, quiet = FALSE)
calibration_tbl %>%
modeltime_forecast(
#new_data    = train,
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
#class(m750_models)
#class(refit_tbl)
#m750_models
ensemble_fit <- refit_tbl %>%
ensemble_average(type = "mean")
refit_tbl <- calibration_tbl %>%
modeltime_refit(data = train)
#class(m750_models)
#class(refit_tbl)
#m750_models
ensemble_fit <- refit_tbl %>%
ensemble_average(type = "mean")
ensemble_fit
# Calibration
calibration_tbl <- modeltime_table(
ensemble_fit
) %>%
modeltime_calibrate(train, quiet = FALSE)
calibration_tbl %>%
modeltime_forecast(
new_data    = train,
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
#    new_data    = train,
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
new_data    = country,
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(train),
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
splits <- initial_time_split(country, prop = 0.8)
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
# Forecast vs Test Set
png("docs/ensemble.png")
calibration_tbl %>%
modeltime_forecast(
new_data    = testing(splits),
actual_data = country
) %>%
plot_modeltime_forecast(.interactive = FALSE,
.title = paste0(mtitle,"\n ",stitle),
.x_lab = x_lab,
.y_lab = y_lab)
dev.off()
calibration_tbl %>%
modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = interactive
)
calibration_tbl %>%
modeltime_accuracy() #%>% table()
print(ensemble_fit$n_models)
print(ensemble_fit$model_tbl)
print(ensemble_fit$model_tbl$.model_desc
)
print(ensemble_fit$model_tbl$.model_desc)
(country.stl <- country.ts %>%
stl(s.window="periodic"))%>%  #, t.window = 5
autoplot() +
ggtitle(mtitle, subtitle = stitle) +
xlab(x_lab) +
ylab(y_lab)
ggsave(here("docs", "stl.png"))
#l.start	The starting value of the level component.
#b.start	The starting value of the trend component.
#prediction.interval True/False; A number between 0 and 1, usually close to 1. Specifies the probability that future values lie within the prediction intervals (given that the model is appropriate).
country.hw <- HoltWinters(train.ts)
#We see from the plot that the Holt-Winters exponential method is very
#successful in predicting the seasonal peaks -
# forecast scale is off because not
#taking enough account of the pandemic
#include ci?
country.hw.fc <- forecast(country.hw, h = future)
plot(country.hw.fc, xlab = "Years", ylab = "Deaths",      main = "HoltWinters forecast (0.94,0,1)")
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
lines(country.hw$fitted)
#plot(country.ts, xlab = "Years", ylab = "Deaths",      main = "HoltWinters forecast (0.94,0,1)")
plot(country.hw.fc, xlab = "Years", ylab = "Deaths",
main = "HoltWinters forecast (0.94,0,1)",
PI = NULL)
?plot
?plot.forecast
#plot(country.ts, xlab = "Years", ylab = "Deaths",      main = "HoltWinters forecast (0.94,0,1)")
plot(country.hw.fc, xlab = "Years", ylab = "Deaths",
main = "HoltWinters forecast (0.94,0,1)",
PI = FALSE)
plot(country.hw.fc, xlab = "Years", ylab = "Deaths",
main = "HoltWinters forecast (0.94,0,1)",
PI = FALSE)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
lines(country.hw$fitted)
autoplot(country.hw.fc)
autoplot(country.hw.fc) + autolayer(valid.ts)
# default graph labels
mtitle <- paste0("Time Series:  ", country_code," all causes deaths by week")
#```{r makeTrain, eval=TRUE, include=TRUE}
# forecast parameter & train/test sets
nValid <- future
nTrain <- length(country.ts) - nValid
train.ts <- window(country.ts, start = c(startYear, startWeek),
end = c(startYear, nTrain))
valid.ts <- window(country.ts, start = c(startYear, nTrain+1),
end = c(startYear, nTrain+nValid))
future <- as.integer(WEEKS*0.2)
#```{r makeTrain, eval=TRUE, include=TRUE}
# forecast parameter & train/test sets
nValid <- future
nTrain <- length(country.ts) - nValid
train.ts <- window(country.ts, start = c(startYear, startWeek),
end = c(startYear, nTrain))
valid.ts <- window(country.ts, start = c(startYear, nTrain+1),
end = c(startYear, nTrain+nValid))
autoplot(country.hw.fc) + autolayer(valid.ts)
#We see from the plot that the Holt-Winters exponential method is very
#successful in predicting the seasonal peaks -
# forecast scale is off because not
#taking enough account of the pandemic
#include ci?
country.hw.fc <- forecast(country.hw, h = future)
#l.start	The starting value of the level component.
#b.start	The starting value of the trend component.
#prediction.interval True/False; A number between 0 and 1, usually close to 1. Specifies the probability that future values lie within the prediction intervals (given that the model is appropriate).
country.hw <- HoltWinters(train.ts)
#We see from the plot that the Holt-Winters exponential method is very
#successful in predicting the seasonal peaks -
# forecast scale is off because not
#taking enough account of the pandemic
#include ci?
country.hw.fc <- forecast(country.hw, h = future)
#plot(country.ts, xlab = "Years", ylab = "Deaths",      main = "HoltWinters forecast (0.94,0,1)")
plot(country.hw.fc, xlab = "Years", ylab = "Deaths",
main = "HoltWinters forecast (0.94,0,1)",
PI = FALSE)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
lines(country.hw$fitted)
lines(valid.ts)
autoplot(country.hw.fc) + autolayer(valid.ts)
?autoplot
?autoplot.forecast
autoplot(country.hw.fc, PI=FALSE) + autolayer(valid.ts)
autoplot(country.hw.fc, PI=FALSE) + autolayer(valid.ts) +
+ autolayer(country.hw$fitted)
autoplot(country.hw.fc, PI=FALSE) + autolayer(valid.ts) +
autolayer(country.hw$fitted)
autoplot(country.hw.fc, PI=FALSE) + autolayer(valid.ts) +
autolayer(country.hw$fitted$level)
head(country.hw.fc)
head(country.hw)
#mape 7.50
?HoltWinters
autoplot(country.hw.fc, PI=FALSE) + autolayer(valid.ts) +
autolayer(country.hw$level)
plot(country.hw$fitted[1,])
plot(country.hw$fitted[,1])
autoplot(country.hw.fc, PI=FALSE) + autolayer(valid.ts) +
autolayer(country.hw$fitted[,1])
plot(country.hw.fc, xlab = "Years", ylab = "Deaths",
main = "HoltWinters forecast (0.94,0,1)",
PI = FALSE)
grid(nx = NULL, ny = NULL, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
lines(country.hw$fitted[,1])
lines(valid.ts)
?lines
lines(country.hw$fitted[,1], col="grey")
autoplot(country.hw.fc, PI=FALSE) + autolayer(valid.ts, "blue") +
autolayer(country.hw$fitted[,1], colour = "blue")
autoplot(country.ts) +
autolayer(country.hw.fc, PI=T, series="HoltWinter forecast") +
autolayer(country.hw$fitted[,1], PI=F, series = "HoltWinter fitted")+
ggtitle(paste0("Mortality in ", country_code, "HoltWinter Forecast"),
subtitle = stitle) +
theme_minimal() +
xlab(x_lab) + ylab(y_lab) +
guides(colour=guide_legend(title="forecast"))
autoplot(country.ts) +
autolayer(country.hw.fc, PI=F, series="HoltWinter forecast") +
autolayer(country.hw$fitted[,1], PI=F, series = " fitted")+
ggtitle(paste0("Mortality in ", country_code, " Forecast"),
subtitle = stitle) +
theme_minimal() +
xlab(x_lab) + ylab(y_lab) +
guides(colour=guide_legend(title="forecast"))
autoplot(country.ts) +
autolayer(country.hw.fc, PI=F, series="forecast") +
autolayer(country.hw$fitted[,1], PI=F, series = " fitted")+
ggtitle(paste0("Mortality in ", country_code, " HoltWinter Forecast"),
subtitle = stitle) +
theme_minimal() +
xlab(x_lab) + ylab(y_lab) +
guides(colour=guide_legend(title="HoltWinter"))
autoplot.forecast
autoplot(country.ts) +
autolayer(country.hw.fc, PI=F, series="forecast") +
autolayer(country.hw$fitted[,1], PI=F, series = " fitted")+
ggtitle(paste0("Mortality in ", country_code, " HoltWinter Forecast"),
subtitle = stitle) +
theme_minimal() +
xlab(x_lab) + ylab(y_lab) +
guides(colour=guide_legend(title="HoltWinter"))
ggsave(here("docs", "holtwinter.png"))
